; ModuleID = 'LFortran'
source_filename = "LFortran"

%array = type { i32*, i32, %dimension_descriptor*, i1, i32 }
%dimension_descriptor = type { i32, i32, i32, i32 }
%array.0 = type { i16*, i32, %dimension_descriptor*, i1, i32 }

define void @_lpython_main_program() {
.entry:
  call void @f()
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define void @f() {
.entry:
  %y = alloca %array, align 8
  %0 = getelementptr %array, %array* %y, i32 0, i32 1
  store i32 0, i32* %0, align 4
  %1 = getelementptr %array, %array* %y, i32 0, i32 2
  %2 = alloca i32, align 4
  store i32 1, i32* %2, align 4
  %3 = load i32, i32* %2, align 4
  %4 = alloca %dimension_descriptor, i32 %3, align 8
  %5 = getelementptr %array, %array* %y, i32 0, i32 4
  store i32 1, i32* %5, align 4
  store %dimension_descriptor* %4, %dimension_descriptor** %1, align 8
  %6 = load %dimension_descriptor*, %dimension_descriptor** %1, align 8
  %7 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %6, i32 0
  %8 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 0
  %9 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 1
  %10 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 2
  %11 = getelementptr %dimension_descriptor, %dimension_descriptor* %7, i32 0, i32 3
  store i32 1, i32* %8, align 4
  store i32 1, i32* %9, align 4
  store i32 2, i32* %10, align 4
  %12 = load i32, i32* %10, align 4
  %13 = load i32, i32* %9, align 4
  %14 = sub i32 %12, %13
  %15 = add i32 %14, 1
  store i32 %15, i32* %11, align 4
  %16 = alloca i32, align 4
  store i32 2, i32* %16, align 4
  %17 = getelementptr %array, %array* %y, i32 0, i32 0
  %18 = load i32, i32* %16, align 4
  %19 = alloca i32, i32 %18, align 4
  store i32* %19, i32** %17, align 8
  %yptr1 = alloca %array.0*, align 8
  %20 = getelementptr %array, %array* %y, i32 0, i32 2
  %21 = load %dimension_descriptor*, %dimension_descriptor** %20, align 8
  %22 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %21, i32 0
  %23 = getelementptr %dimension_descriptor, %dimension_descriptor* %22, i32 0, i32 1
  %24 = load i32, i32* %23, align 4
  %25 = sub i32 1, %24
  %26 = mul i32 1, %25
  %27 = add i32 0, %26
  %28 = getelementptr %dimension_descriptor, %dimension_descriptor* %22, i32 0, i32 3
  %29 = load i32, i32* %28, align 4
  %30 = mul i32 1, %29
  %31 = getelementptr %array, %array* %y, i32 0, i32 0
  %32 = load i32*, i32** %31, align 8
  %33 = getelementptr inbounds i32, i32* %32, i32 %27
  store i32 1, i32* %33, align 4
  %34 = getelementptr %array, %array* %y, i32 0, i32 2
  %35 = load %dimension_descriptor*, %dimension_descriptor** %34, align 8
  %36 = getelementptr inbounds %dimension_descriptor, %dimension_descriptor* %35, i32 0
  %37 = getelementptr %dimension_descriptor, %dimension_descriptor* %36, i32 0, i32 1
  %38 = load i32, i32* %37, align 4
  %39 = sub i32 2, %38
  %40 = mul i32 1, %39
  %41 = add i32 0, %40
  %42 = getelementptr %dimension_descriptor, %dimension_descriptor* %36, i32 0, i32 3
  %43 = load i32, i32* %42, align 4
  %44 = mul i32 1, %43
  %45 = getelementptr %array, %array* %y, i32 0, i32 0
  %46 = load i32*, i32** %45, align 8
  %47 = getelementptr inbounds i32, i32* %46, i32 %41
  store i32 2, i32* %47, align 4
  store %array* %y, %array.0** %yptr1, align 8
  br label %return

return:                                           ; preds = %.entry
  ret void
}

define i32 @main() {
.entry:
  call void @_lpython_main_program()
  ret i32 0
}
